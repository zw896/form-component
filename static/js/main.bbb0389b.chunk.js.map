{"version":3,"sources":["components/DynamicForm/JsonData.js","components/Input/Input.js","components/DynamicForm/DynamicForm.js","App.js","serviceWorker.js","index.js"],"names":["bmiReferenceProps","id","observationName","dataElements","displayName","type","display","isRequired","options","name","isDefault","sortOrder","unitOfMeasure","bounds","upperLimit","headCircumferenceReferenceProps","Input","props","inputType","react_default","a","createElement","className","value","placeholder","onChange","react_select_esm","defaultValue","default","onSelectChange","theme","Object","objectSpread","borderRadius","colors","primary25","primary","DynamicForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","data","state","defineProperty","target","console","log","handleSelectChange","validateForm","errorMessgage","forEach","dataElement","concat","match","dataObj","bmi","weight","Math","pow","height","errors","keys","length","switchForm","formId","formName","map","vals","reduce","obj","key","isLoading","onSubmit","preventDefault","bind","assertThisInitialized","selectedOption","_this2","_this$state","onClick","opt","label","components_Input_Input","Component","App","DynamicForm_DynamicForm_DynamicForm","title","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bbb0389b.chunk.js","sourcesContent":["const bmiReferenceProps = {\n    id: 'bmi',\n    observationName: 'BMI - Body mass index',\n    dataElements: [{\n        id: 'name',\n        displayName: 'Name',\n        type: 'textInput',\n        display: true,\n        isRequired: true,\n    }, \n    {\n        id: 'gender',\n        displayName: 'Gender',\n        type: 'select',\n        options: [{\n            id: 1,\n            name: 'Male',\n            isDefault: true,\n            sortOrder: 1,\n        }, {\n            id: 2,\n            name: 'Female',\n            isDefault: false,\n            sortOrder: 2,\n        }, ],\n        display: true,\n        isRequired: false,\n    }, \n    {\n        id: 'weight',\n        displayName: 'Weight',\n        unitOfMeasure: 'kg',\n        type: 'numberInput',\n        bounds: {\n            upperLimit: 1000,\n        },\n        display: true,\n        isRequired: true,\n    }, \n    {\n        id: 'height',\n        displayName: 'Height',\n        unitOfMeasure: 'cm',\n        type: 'numberInput',\n        bounds: {\n            upperLimit: 300,\n        },\n        display: true,\n        isRequired: true,\n    }, \n    {\n        id: 'bmi',\n        displayName: 'BMI',\n        unitOfMeasure: 'kg/m2',\n        type: 'numberInput',\n        bounds: {\n            upperLimit: 100,\n        },\n        display: false,\n        isRequired: false,\n    }, ],\n};\n\n\nconst headCircumferenceReferenceProps = {\n    id: 'head-circumference',\n    observationName: 'Head Circumference',\n    dataElements: [{\n        id: 'name',\n        displayName: 'Name',\n        type: 'textInput',\n        display: true,\n        isRequired: true,\n    }, \n    {\n        id: 'gender',\n        displayName: 'Gender',\n        type: 'select',\n        options: [{\n            id: 1,\n            name: 'Male',\n            isDefault: true,\n            sortOrder: 1,\n        }, {\n            id: 2,\n            name: 'Female',\n            isDefault: false,\n            sortOrder: 2,\n        }, ],\n        display: true,\n        isRequired: false,\n    }, \n    {\n        id: 'head-circumference',\n        displayName: 'Head Circumference',\n        unitOfMeasure: 'cm',\n        type: 'numberInput',\n        bounds: {\n            upperLimit: 1000,\n        },\n        display: true,\n        isRequired: true,\n    }, ],\n};\n\nexport {\n    bmiReferenceProps,\n    headCircumferenceReferenceProps\n}","import React from 'react';\nimport Select from 'react-select';\n\nconst Input = ( props ) => {\n    let inputType = null;\n\n    switch ( props.type ) {\n        case ('textInput'):\n        case ('numberInput'):\n            inputType = <input \n                className={props.type} \n                type={props.type}\n                name={props.name}\n                value={props.value}\n                placeholder={props.placeholder}\n                onChange={props.onChange}/>;\n            break;\n        case ('select'):\n            inputType = \n                <Select \n                    className={props.type}\n                    defaultValue={props.default}\n                    options={props.options}\n                    onChange={props.onSelectChange}\n                    theme={(theme) => ({\n                        ...theme,\n                        borderRadius: 0,\n                        colors: {\n                        ...theme.colors,\n                          primary25: 'hotpink',\n                          primary: 'black',\n                        },\n                    })}\n                />;\n            break;\n        default:\n            return null;\n    }\n\n    return (\n        <div className=\"form-input\">\n            {inputType}\n        </div>\n    );\n}\n\nexport default Input;","import React, { Component } from \"react\";\nimport { bmiReferenceProps, headCircumferenceReferenceProps } from \"./JsonData\";\nimport Input from \"../Input/Input\";\nimport \"./DynamicForm.css\";\nexport default class DynamicForm extends Component {\n  constructor(props) {\n    super(props);\n    const { id, dataElements, observationName } = bmiReferenceProps;\n    // Object that would be finally outputted\n    const data = dataElements\n      .map(vals => vals.id)\n      .reduce((obj, key) => ({ ...obj, [key]: \"\" }), {});\n\n    this.state = {\n      isLoading: true,\n      id: id || null,\n      observationName: observationName || null,\n      dataElements: dataElements,\n      data,\n      errors: {}\n    };\n\n    this.onChange = this.handleChange.bind(this);\n    this.onSelectChange = this.handleSelectChange.bind(this);\n  }\n\n  handleChange = event => {\n    this.setState({\n      data: {\n        ...this.state.data,\n        [event.target.name]: event.target.value\n      }\n    });\n\n    console.log(this.state.data);\n  };\n\n  handleSelectChange = (event, id) => {\n    this.setState({\n      data: {\n        ...this.state.data,\n        [id]: event.value\n      }\n    });\n  };\n\n  validateForm = data => {\n    const errorMessgage = {};\n    this.state.dataElements.forEach(dataElement => {\n      // If the input value is empty\n      if (dataElement.isRequired && !data[dataElement.id])\n        errorMessgage[dataElement.id] = `${dataElement.displayName} can't be blank.`;\n      // Validate name\n      if (dataElement.id === \"name\" && data[dataElement.id]) {\n        //console.log(data[dataElement.id]);\n        let regexName = /^([a-zA-Z]+\\s){1}[a-zA-Z]+$/;\n        if (!data[dataElement.id].match(regexName)) {\n          errorMessgage[dataElement.id] = \"Name should be text based and separated by a space.\";\n        }\n      }\n      // Validate height and weight\n      if (dataElement.bounds && dataElement.id !== \"bmi\") {\n        let regexNum = /[0-9]\\S+$/;\n        if (\n          !data[dataElement.id].match(regexNum) ||\n          data[dataElement.id] > dataElement.bounds.upperLimit\n        ) {\n          errorMessgage[dataElement.id] = `${\n            dataElement.id\n          } should be numbers and less than ${dataElement.bounds.upperLimit}`;\n        }\n      }\n\n      if (dataElement.id === 'bmi') {\n        let dataObj = data;\n        // ! BMI formula: weight / height(m) squared\n        dataObj.bmi = dataObj.weight / Math.pow(dataObj.height / 100, 2);\n      }\n    });\n\n    this.setState({\n      errors: errorMessgage\n    });\n    return Object.keys(errorMessgage).length === 0;\n  };\n\n  switchForm = (formId) => {\n    const formName = formId === 'bmi' ?  headCircumferenceReferenceProps : bmiReferenceProps;\n    const { id, dataElements, observationName } = formName;\n    // Object that would be finally outputted\n    const data = dataElements\n      .map(vals => vals.id)\n      .reduce((obj, key) => ({ ...obj, [key]: \"\" }), {});\n\n    this.setState({\n      isLoading: true,\n      id: id || null,\n      observationName: observationName || null,\n      dataElements: dataElements,\n      data,\n      errors: {}\n    });\n  }\n\n  onSubmit = event => {\n    event.preventDefault();\n    const isValid = this.validateForm(this.state.data);\n    if (isValid) {\n      console.log(this.state.data);\n    }\n  };\n\n  render() {\n    const { id, observationName, dataElements, data, errors } = this.state;\n    let selectedOption,\n      defaultValue = \"\";\n\n    return (\n      <div className=\"container\">\n        <div className=\"form-switch\">\n          <button className=\"switch\" onClick={() => this.switchForm(`${id}`)}>switch</button>\n        </div>\n        <form className=\"form-field\" onSubmit={this.onSubmit}>\n          <h1 id=\"message\">{observationName}</h1>\n          \n          {dataElements.map(dataElement => {\n            if (dataElement.display) {\n              if (dataElement.type === \"select\") {\n                selectedOption = dataElement.options.map(opt =>\n                {\n                    if (opt.isDefault) defaultValue = opt.name;\n                    return {\n                        value: opt.id,\n                        label: opt.name\n                    };\n                });\n              }\n              return (\n                <div className=\"form-input\" key={dataElement.id}>\n                  <h3>{`${dataElement.displayName} ${\n                    dataElement.unitOfMeasure\n                      ? ` (${dataElement.unitOfMeasure})`\n                      : \"\"\n                  }`}</h3>\n                  <Input\n                    type={dataElement.type}\n                    name={dataElement.id}\n                    bounds={dataElement.bounds}\n                    options={selectedOption}\n                    placeholder={dataElement.displayName}\n                    value={data[dataElement.id]}\n                    default={defaultValue}\n                    onChange={this.handleChange}\n                    onSelectChange={event =>\n                      this.handleSelectChange(event, dataElement.id)\n                    }\n                  />\n                  <div className=\"error\">{errors[dataElement.id]}</div>\n                </div>\n              );\n            }\n            else\n              return null;\n          })\n        }\n\n          <div className=\"form-group\">\n            <button className=\"submit\" type=\"submit\">\n              submit\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport DynamicForm from './components/DynamicForm/DynamicForm.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DynamicForm className=\"form-wrap\" title=\"Dynamic Form\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}